# Copyright 2006 by Sean Luke and George Mason University
# Licensed under the Academic Free License version 3.0
# See the file "LICENSE" for more information

parent.0 = ../../gp/koza/koza.params

# the next four items are already defined in koza.params, but we
# put them here to be clear.

# We have one function set, of class GPFunctionSet
gp.fs.size = 1
gp.fs.0 = ec.gp.GPFunctionSet
# We'll call the function set "f0".
gp.fs.0.name = f0

# We have five functions in the function set.  They are:
# nc0 = 0 children, or terminals. nc2 likewise means 2 children.
gp.fs.0.size = 7
gp.fs.0.func.0 = ec.app.filereader.X
gp.fs.0.func.0.nc = nc0
gp.fs.0.func.1 = ec.app.filereader.ERCDouble
gp.fs.0.func.1.nc = nc0
gp.fs.0.func.2 = ec.app.filereader.Add
gp.fs.0.func.2.nc = nc2
gp.fs.0.func.3 = ec.app.filereader.Sub
gp.fs.0.func.3.nc = nc2
gp.fs.0.func.4 = ec.app.filereader.Mul
gp.fs.0.func.4.nc = nc2
gp.fs.0.func.5 = ec.app.filereader.Div
gp.fs.0.func.5.nc = nc2
gp.fs.0.func.6 = ec.app.filereader.Log
gp.fs.0.func.6.nc = nc1
#gp.fs.0.func.7 = ec.app.filereader.Exp
#gp.fs.0.func.7.nc = nc1

eval.problem = ec.app.filereader.FileInputRegression
eval.problem.data = ec.app.filereader.DoubleData

# run for 51 generations, quit prematurely if I find something ideal
generations =				100
quit-on-run-complete =			true

# Population size
pop.subpop.0.size =			1000
# don't bother trying to eliminate duplicates from the
# initial population
pop.subpop.0.duplicate-retries =	0

pop.subpop.0.species.pipe = ec.breed.MultiBreedingPipeline
# Koza's decision here was odd...
pop.subpop.0.species.pipe.generate-max = false
# Subsidiary pipelines:
pop.subpop.0.species.pipe.num-sources = 3
pop.subpop.0.species.pipe.source.0 = ec.gp.koza.CrossoverPipeline
pop.subpop.0.species.pipe.source.0.prob = 0.9
pop.subpop.0.species.pipe.source.1 = ec.breed.ReproductionPipeline
pop.subpop.0.species.pipe.source.1.prob = 0
pop.subpop.0.species.pipe.source.2 = ec.gp.koza.MutationPipeline
pop.subpop.0.species.pipe.source.2.prob = 0.1

# By default elitism isn't done.  If you want to do elitism for, say,
# the top 10 individuals in subpopulation 0, you'd say:

breed.elite.0 =                         0

# one thread
evalthreads = 				auto
breedthreads = 				auto

# ECJ used to use this as its initial random seed by default.  No longer, now
# it's assumed to be the wall clock time by default.
# seed.0 = 				4357
seed.0 =				time

